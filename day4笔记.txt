# ***promise***

概念: promise函数是解决异步编程问题产生的,所谓 Promise ，简单说就是一个容器，里面保存着某个未来才会结束的事件(通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理

```
 let p1 = new Promise((resolve, reject) => {
        console.log("myPromise")
    })
    console.log(p1)
```

## 二、Promise的使用

*概念: promise数是一个容器,里面存放着异步代码

* 特点:
  *1.有三种状态:进行中:pedding,已成功:resolve，已失败:reject
  *2.状态一经凝固 就不会再改变
  *3.状态变化有两种变化:1.pedding---resolve 2.pedding---reject


当我们调用resolve回调函数时，会执行Promise对象的then方法传入的回调函数；当我们调用reject回调函数时，会执行promise对象的catch方法传入的回调函数。
then方法和catch方法是Promise原型上的一个方法：then方法会返回一个Promise，最多可以接收两个参数，分别是Promise成功和失败情况的回调函数；catch方法也返回一个Promise，当我们的Promise被拒绝时(reject)调用catch里的回调函数。

```
  let p1 = new Promise((resolve, reject) => {
      reject()
      // resolve()
    })
    console.log(p1)
    p1.then(() => {
      console.log('成功的回调')
    }, () => {
      console.log("失败的回调")
    }
```

#### 1.1：then

那么.then方法返回的这个Promise的状态是由什么决定的呢，事实上，这个新Promise的决议是等到then方法传入的回调函数有返回值时, 才会进行决议。
当then方法中的回调函数在执行的时候，返回的promise处于pending状态，当返回一个结果时，会处于fullfilled状态，并且将结果作为resolve的参数，因此链式调用的then方法里的回调函数的参数是上一个then方法的返回值

**情况一：**返回一个普通的值a。将这个值a作为resolve的参数，因此在后面的.then方法里的回调函数获取到的参数就是a

**情况二**：返回一个Promise。如果返回了一个PromiseA，那么then返回的PromiseB的状态会由PromiseA的状态决定，并且将PromiseA的状态的回调函数的参数作为PromiseB的状态的回调函数的参数

**情况三**：返回一个thenable对象，如果then方法里面的回调函数返回了一个带有then方法的对象，那么then方法返回的PromiseAd的状态是由then方法里的结果决定

#### 1.2:catch

链式调用中的.catch方法的执行时机，是由上一个promise是否抛出异常决定的，如果上一个Promise照常返回一个值，执行的是链式调用中的then方法

## 三 特点

1.对象的状态不受外界影响,有三种状态:pending(进行中)、fulfilled(已成功)和 rejected(已失败)
2.一旦状态改变,就不会再变,任何时候都可以得到这个结果.
3.Promise 对象的状态改变，只有两种可能:从 pending变为 fulfilled和从 pending变为 rejected 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为resolved(已定型)。如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。



promise函数底层原理是根据什么封装的
根据原生js提供的网络请求  ***XMLHttpRequest***  进行封装

Promise.resolve
Promise.resolve(res)  方法返回一个以给定值解析后的 Promise对象，有时候我们已经有一个现成的值希望将其转换成Promise可以使用该类方法

Promise.reject
reject方法类似于resolve方法，只是会将Promise对象的状态设置为reject状态

### 一：Promise.all

Promise.all的作用是将多个Promise包裹在一起形成一个新的Promise，并且这个新的Promise的状态是由包裹的Promise的状态共同决定的：

当所有的Promise的状态变成fullfilled，新的Promise的状态变为fullfilled，并将所有promise的返回值组成一个数组
当有一个Promise的状态变成reject,新的Promise的状态会变成reject，并且会将第一个reject的Promise的返回值作为参数

## 二：Promise.race

1.概念
race 竞速 竞跑
2.特点:
1.就是 多个promise同时请求的时候，以第一个请求完成的promise状态 作为整个promise的状态
多个宏任务 执行顺序是 先进先出
结束的终点 直到有一个resolve出现

### 三：promise.finally

1.概念
finaly 最后,最终
finally()方法返回一个 Pamise 。在 promise 结束时，无论结果是fulfied 或者是rejected，都会执行指定的回调函数。他在Promise 是否成功完成后都需要执行的代码提供了一种方式。这避免了同样的语句需要在 thenO)和 catchO 中各写一次的情况

